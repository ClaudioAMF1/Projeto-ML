import streamlit as st
import pandas as pd
import numpy as np
from pathlib import Path
import json


class RecommendationSystem:
    def __init__(self):
        self.load_recommendations()

    def load_recommendations(self):
        """Carrega base de recomenda√ß√µes"""
        self.recommendations = {
            'lifestyle': {
                'high_risk': [
                    "Procure atendimento m√©dico imediatamente",
                    "Monitore sua press√£o arterial diariamente",
                    "Evite atividades f√≠sicas intensas sem supervis√£o m√©dica",
                    "Mantenha registro detalhado dos sintomas",
                    "Tome medicamentos conforme prescri√ß√£o m√©dica"
                ],
                'medium_risk': [
                    "Agende uma consulta m√©dica nas pr√≥ximas semanas",
                    "Comece um programa de exerc√≠cios leves",
                    "Reduza a ingest√£o de sal",
                    "Monitore sua press√£o arterial semanalmente",
                    "Pratique t√©cnicas de redu√ß√£o de estresse"
                ],
                'low_risk': [
                    "Mantenha h√°bitos saud√°veis",
                    "Fa√ßa exerc√≠cios regulares",
                    "Mantenha uma dieta equilibrada",
                    "Fa√ßa checkups anuais",
                    "Monitore sua press√£o arterial mensalmente"
                ]
            },
            'diet': {
                'high_risk': [
                    "Dieta com restri√ß√£o severa de s√≥dio (<1500mg/dia)",
                    "Evite totalmente gorduras trans",
                    "Limite gorduras saturadas a <7% das calorias",
                    "Priorize prote√≠nas magras",
                    "Aumente consumo de fibras sol√∫veis"
                ],
                'medium_risk': [
                    "Reduza s√≥dio para <2300mg/dia",
                    "Limite gorduras saturadas",
                    "Aumente consumo de vegetais",
                    "Prefira gr√£os integrais",
                    "Modere consumo de a√ß√∫cares"
                ],
                'low_risk': [
                    "Mantenha uma dieta balanceada",
                    "Consuma frutas e vegetais variados",
                    "Escolha gr√£os integrais",
                    "Modere consumo de √°lcool",
                    "Mantenha boa hidrata√ß√£o"
                ]
            },
            'exercise': {
                'high_risk': [
                    "Exerc√≠cios somente com supervis√£o m√©dica",
                    "Foque em atividades de baixo impacto",
                    "Monitore frequ√™ncia card√≠aca",
                    "Evite exerc√≠cios em temperaturas extremas",
                    "Comece com 5-10 minutos por sess√£o"
                ],
                'medium_risk': [
                    "30 minutos de exerc√≠cio moderado 5x/semana",
                    "Inclua caminhadas di√°rias",
                    "Fa√ßa exerc√≠cios de for√ßa leves",
                    "Pratique alongamentos",
                    "Monitore seu esfor√ßo"
                ],
                'low_risk': [
                    "150 minutos de exerc√≠cio moderado por semana",
                    "Inclua exerc√≠cios aer√≥bicos",
                    "Fa√ßa treino de for√ßa 2-3x/semana",
                    "Pratique atividades variadas",
                    "Aumente gradualmente a intensidade"
                ]
            }
        }

    def get_risk_level(self, prediction: float) -> str:
        """Determina n√≠vel de risco baseado na predi√ß√£o"""
        if prediction > 0.7:
            return 'high_risk'
        elif prediction > 0.3:
            return 'medium_risk'
        return 'low_risk'

    def get_recommendations(self, prediction: float, features: dict) -> dict:
        """Gera recomenda√ß√µes personalizadas baseadas na predi√ß√£o e caracter√≠sticas"""
        risk_level = self.get_risk_level(prediction)

        recommendations = {
            'risk_level': risk_level,
            'lifestyle': self.recommendations['lifestyle'][risk_level],
            'diet': self.recommendations['diet'][risk_level],
            'exercise': self.recommendations['exercise'][risk_level]
        }

        # Adiciona recomenda√ß√µes espec√≠ficas baseadas nas caracter√≠sticas
        specific_recommendations = []

        if features.get('age', 0) > 60:
            specific_recommendations.append(
                "Considerando sua idade, mantenha acompanhamento m√©dico regular"
            )

        if features.get('trestbps', 0) > 140:
            specific_recommendations.append(
                "Sua press√£o arterial est√° elevada. Monitore com frequ√™ncia"
            )

        if features.get('chol', 0) > 200:
            specific_recommendations.append(
                "Seu colesterol est√° acima do ideal. Considere ajustes na dieta"
            )

        recommendations['specific'] = specific_recommendations
        return recommendations

    def show_recommendations(self, prediction: float, features: dict):
        """Mostra recomenda√ß√µes na interface"""
        recommendations = self.get_recommendations(prediction, features)

        # T√≠tulo com cor baseada no risco
        risk_colors = {
            'high_risk': 'red',
            'medium_risk': 'orange',
            'low_risk': 'green'
        }

        st.markdown(
            f"<h2 style='color: {risk_colors[recommendations['risk_level']]}'>üéØ "
            f"Recomenda√ß√µes Personalizadas</h2>",
            unsafe_allow_html=True
        )

        # Tabs para diferentes categorias
        tab1, tab2, tab3 = st.tabs(["Estilo de Vida", "Dieta", "Exerc√≠cios"])

        with tab1:
            st.subheader("‚ú® Recomenda√ß√µes de Estilo de Vida")
            for rec in recommendations['lifestyle']:
                st.write(f"‚Ä¢ {rec}")

        with tab2:
            st.subheader("ü•ó Recomenda√ß√µes Nutricionais")
            for rec in recommendations['diet']:
                st.write(f"‚Ä¢ {rec}")

        with tab3:
            st.subheader("üèÉ‚Äç‚ôÇÔ∏è Recomenda√ß√µes de Exerc√≠cios")
            for rec in recommendations['exercise']:
                st.write(f"‚Ä¢ {rec}")

        # Recomenda√ß√µes espec√≠ficas
        if recommendations['specific']:
            st.subheader("üìå Recomenda√ß√µes Espec√≠ficas")
            for rec in recommendations['specific']:
                st.info(rec)

        # Disclaimer
        st.markdown("""
        ---
        *Nota: Estas recomenda√ß√µes s√£o baseadas em diretrizes gerais e seus fatores de risco espec√≠ficos. 
        Sempre consulte um profissional de sa√∫de antes de iniciar qualquer mudan√ßa significativa em sua rotina.*
        """)

    def export_recommendations(self, prediction: float, features: dict) -> str:
        """Exporta recomenda√ß√µes em formato de relat√≥rio"""
        recommendations = self.get_recommendations(prediction, features)

        report = f"""
        RELAT√ìRIO DE RECOMENDA√á√ïES DE SA√öDE CARDIOVASCULAR
        ================================================
        Data: {pd.Timestamp.now().strftime('%d/%m/%Y %H:%M')}

        N√çVEL DE RISCO: {recommendations['risk_level'].upper().replace('_', ' ')}

        1. RECOMENDA√á√ïES DE ESTILO DE VIDA
        ---------------------------------
        {chr(10).join('‚Ä¢ ' + rec for rec in recommendations['lifestyle'])}

        2. RECOMENDA√á√ïES NUTRICIONAIS
        ---------------------------
        {chr(10).join('‚Ä¢ ' + rec for rec in recommendations['diet'])}

        3. RECOMENDA√á√ïES DE EXERC√çCIOS
        ----------------------------
        {chr(10).join('‚Ä¢ ' + rec for rec in recommendations['exercise'])}
        """

        if recommendations['specific']:
            report += f"""
        4. RECOMENDA√á√ïES ESPEC√çFICAS
        --------------------------
        {chr(10).join('‚Ä¢ ' + rec for rec in recommendations['specific'])}
        """

        report += """
        OBSERVA√á√ÉO: Este relat√≥rio √© gerado automaticamente com base em algoritmos 
        de avalia√ß√£o de risco. Todas as recomenda√ß√µes devem ser discutidas e 
        validadas por um profissional de sa√∫de qualificado.
        """

        return report